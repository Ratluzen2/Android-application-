name: Android Build (Unified from Release tag)

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  PROJECT_DIR: .

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # ✅ Properly install Android SDK & cmdline-tools so sdkmanager is available
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android packages
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Create google-services.json from secret (optional)
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          if [ -n "$GOOGLE_SERVICES_JSON" ]; then
            mkdir -p "${{ env.PROJECT_DIR }}/app"
            printf '%s' "$GOOGLE_SERVICES_JSON" > "${{ env.PROJECT_DIR }}/app/google-services.json"
          fi

      - name: Compute VERSION_* from latest published Release tag (fallback to latest tag)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # 1) If triggered by a Release, use its tag_name
          TAG="${{ github.event.release.tag_name }}"
          # 2) Otherwise, try latest published Release via gh (if available)
          if [ -z "$TAG" ]; then
            TAG="$(gh release view --json tagName --jq .tagName 2>/dev/null || true)"
          fi
          # 3) Fallback to latest repo tag
          if [ -z "$TAG" ]; then
            TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
          fi
          # 4) Final fallback
          if [ -z "$TAG" ]; then TAG="v1"; fi
          VC="$(echo "$TAG" | tr -cd '0-9')"
          echo "Using tag: $TAG (VERSION_CODE=${VC:-1})"
          echo "VERSION_NAME=$TAG" >> $GITHUB_ENV
          echo "VERSION_CODE=${VC:-1}" >> $GITHUB_ENV

      - name: Build (assembleRelease) using unified version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          chmod +x ./gradlew || true
          ./gradlew clean :app:assembleRelease -PVERSION_NAME="$VERSION_NAME" -PVERSION_CODE="$VERSION_CODE"

      # ✅ Sign only if secrets exist; otherwise upload unsigned APK
      - name: Prepare keystore
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | tr -d '\r' | base64 -d > keystore.jks
          ls -lh keystore.jks || true

      - name: Align & Sign (conditional)
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' && secrets.ANDROID_KEY_ALIAS != '' && secrets.ANDROID_KEYSTORE_PASSWORD != '' && secrets.ANDROID_KEY_PASSWORD != '' }}
        env:
          KS_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KS_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_PASS: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -e
          RELEASE_DIR="${{ env.PROJECT_DIR }}/app/build/outputs/apk/release"
          UNSIGNED_APK=$(ls "$RELEASE_DIR"/*-unsigned.apk | head -n 1)
          BT=$(ls -d $ANDROID_HOME/build-tools/* | sort -V | tail -n1)
          echo "Using build-tools at: $BT"
          "$BT/zipalign" -f 4 "$UNSIGNED_APK" "$RELEASE_DIR/app-release-aligned.apk"
          "$BT/apksigner" sign             --ks keystore.jks             --ks-key-alias "$KS_ALIAS"             --ks-pass env:KS_PASS             --key-pass env:KEY_PASS             --out "$RELEASE_DIR/app-release.apk"             "$RELEASE_DIR/app-release-aligned.apk"
          "$BT/apksigner" verify -v "$RELEASE_DIR/app-release.apk"
          echo "SIGNED_APK=$RELEASE_DIR/app-release.apk" >> $GITHUB_ENV

      - name: Set APK path (unsigned fallback)
        if: ${{ env.SIGNED_APK == '' }}
        run: |
          RELEASE_DIR="${{ env.PROJECT_DIR }}/app/build/outputs/apk/release"
          APK=$(ls "$RELEASE_DIR"/*-unsigned.apk | head -n 1)
          echo "SIGNED_APK=$APK" >> $GITHUB_ENV

      - name: Upload artifact (APK only; no Releases upload)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-${{ env.VERSION_NAME }}
          path: ${{ env.SIGNED_APK }}
