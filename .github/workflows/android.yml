name: Android Build (Tag-unified, wrapper-safe, with-logs)

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  release:
    types: [published]

env:
  PROJECT_DIR: .

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android packages
        run: |
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Detect project directory & wrapper
        id: detect
        run: |
          set -e
          WRAP="$(git ls-files | grep -m1 '^.*gradlew$' || true)"
          if [ -n "$WRAP" ]; then
            DIR="$(dirname "$WRAP")"
            echo "Found gradlew at: $WRAP"
            echo "PROJECT_DIR=$DIR" >> $GITHUB_ENV
            echo "USE_WRAPPER=true" >> $GITHUB_ENV
          else
            # Try common roots
            for d in . android app ; do
              if [ -f "$d/settings.gradle" ] || [ -f "$d/settings.gradle.kts" ]; then
                echo "Detected Gradle project at: $d"
                echo "PROJECT_DIR=$d" >> $GITHUB_ENV
                break
              fi
            done
            echo "USE_WRAPPER=false" >> $GITHUB_ENV
          fi
          echo "PROJECT_DIR=${{ env.PROJECT_DIR }}"
          echo "USE_WRAPPER=$USE_WRAPPER"

      - name: Prepare log directory
        run: |
          echo "LOG_DIR=$GITHUB_WORKSPACE/build_logs" >> $GITHUB_ENV
          mkdir -p "$GITHUB_WORKSPACE/build_logs"

      - name: Create google-services.json from secret (optional)
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          if [ -n "$GOOGLE_SERVICES_JSON" ]; then
            mkdir -p "${{ env.PROJECT_DIR }}/app"
            printf '%s' "$GOOGLE_SERVICES_JSON" > "${{ env.PROJECT_DIR }}/app/google-services.json"
          fi

      - name: Compute VERSION_* from latest published Release tag (fallbacks)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG="${{ github.event.release.tag_name }}"
          if [ -z "$TAG" ]; then
            TAG="$(gh release view --json tagName --jq .tagName 2>/dev/null || true)"
          fi
          if [ -z "$TAG" ]; then
            TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
          fi
          if [ -z "$TAG" ]; then TAG="v1"; fi
          VC="$(echo "$TAG" | tr -cd '0-9')"
          echo "Using tag: $TAG  -> VERSION_CODE=${VC:-1}"
          echo "VERSION_NAME=$TAG" >> $GITHUB_ENV
          echo "VERSION_CODE=${VC:-1}" >> $GITHUB_ENV

      - name: Build with Gradle Wrapper (with full log)
        if: env.USE_WRAPPER == 'true'
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -eo pipefail
          chmod +x ./gradlew || true
          echo "==== Gradle & Android env versions ====" >> "$LOG_DIR/versions.txt" 2>&1
          ./gradlew --version >> "$LOG_DIR/versions.txt" 2>&1 || true
          sdkmanager --version >> "$LOG_DIR/versions.txt" 2>&1 || true
          echo "=======================================" >> "$LOG_DIR/versions.txt" 2>&1
          # Run build and tee all output to a log file
          ./gradlew clean :app:assembleRelease             -PVERSION_NAME="$VERSION_NAME" -PVERSION_CODE="$VERSION_CODE"             -PversionName="$VERSION_NAME" -PversionCode="$VERSION_CODE"             --stacktrace --info --no-daemon --console=plain 2>&1 | tee "$LOG_DIR/gradle_build.log"
          GRADLE_EXIT=${PIPESTATUS[0]}
          echo "GRADLE_EXIT=$GRADLE_EXIT" >> $GITHUB_ENV
          exit $GRADLE_EXIT

      - name: Build with Gradle (no wrapper)
        if: env.USE_WRAPPER != 'true'
        uses: gradle/gradle-build-action@v3
        with:
          gradle-version: 8.7
          build-root-directory: ${{ env.PROJECT_DIR }}
          arguments: >-
            clean :app:assembleRelease
            -PVERSION_NAME=${{ env.VERSION_NAME }} -PVERSION_CODE=${{ env.VERSION_CODE }}
            -PversionName=${{ env.VERSION_NAME }} -PversionCode=${{ env.VERSION_CODE }}
            --stacktrace --info --console=plain

      - name: Prepare keystore (optional)
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          if [ -n "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | tr -d '
' | base64 -d > keystore.jks
            echo "HAS_KEYSTORE=true" >> $GITHUB_ENV
          else
            echo "HAS_KEYSTORE=false" >> $GITHUB_ENV
          fi

      - name: Align & Sign (conditional inside script)
        env:
          KS_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KS_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_PASS: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -e
          RELEASE_DIR="${{ env.PROJECT_DIR }}/app/build/outputs/apk/release"
          # Search for unsigned if wrapperless path differences occur
          UNSIGNED_APK=$(ls "$RELEASE_DIR"/*-unsigned.apk 2>/dev/null | head -n 1 || true)
          if [ -z "$UNSIGNED_APK" ]; then
            echo "No *-unsigned.apk found in $RELEASE_DIR; listing files for debug:" | tee -a "$LOG_DIR/signing.log"
            ls -lR "${{ env.PROJECT_DIR }}/app/build/outputs" | tee -a "$LOG_DIR/signing.log" || true
          fi
          BT=$(ls -d $ANDROID_HOME/build-tools/* | sort -V | tail -n1)
          if [ "$HAS_KEYSTORE" = "true" ] && [ -n "$KS_ALIAS" ] && [ -n "$KS_PASS" ] && [ -n "$KEY_PASS" ] && [ -n "$UNSIGNED_APK" ]; then
            "$BT/zipalign" -f 4 "$UNSIGNED_APK" "$RELEASE_DIR/app-release-aligned.apk" 2>&1 | tee -a "$LOG_DIR/signing.log"
            "$BT/apksigner" sign               --ks keystore.jks               --ks-key-alias "$KS_ALIAS"               --ks-pass pass:"$KS_PASS"               --key-pass pass:"$KEY_PASS"               --out "$RELEASE_DIR/app-release.apk"               "$RELEASE_DIR/app-release-aligned.apk" 2>&1 | tee -a "$LOG_DIR/signing.log"
            "$BT/apksigner" verify -v "$RELEASE_DIR/app-release.apk" 2>&1 | tee -a "$LOG_DIR/signing.log"
            echo "FINAL_APK=$RELEASE_DIR/app-release.apk" >> $GITHUB_ENV
          else
            # Fallback: upload unsigned or aligned if exists
            if [ -n "$UNSIGNED_APK" ]; then
              echo "FINAL_APK=$UNSIGNED_APK" >> $GITHUB_ENV
            elif [ -f "$RELEASE_DIR/app-release.apk" ]; then
              echo "FINAL_APK=$RELEASE_DIR/app-release.apk" >> $GITHUB_ENV
            else
              echo "FINAL_APK=" >> $GITHUB_ENV
            fi
          fi

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.VERSION_NAME }}-${{ github.run_attempt }}
          path: |
            build_logs/*
            ${{ env.PROJECT_DIR }}/app/build/outputs/logs/**
            ${{ env.PROJECT_DIR }}/app/build/reports/**
          if-no-files-found: ignore
          retention-days: 14

      - name: Upload artifact (APK)
        if: ${{ env.FINAL_APK != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ env.VERSION_NAME }}
          path: ${{ env.FINAL_APK }}
