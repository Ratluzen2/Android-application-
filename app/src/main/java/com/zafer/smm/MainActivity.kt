
@file:Suppress("UnusedImport", "NAME_SHADOWING")

package com.zafer.smm

import android.content.Context
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.ClipboardManager
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalUriHandler
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.json.JSONArray
import org.json.JSONObject
import java.io.BufferedReader
import java.io.OutputStreamWriter
import java.net.HttpURLConnection
import java.net.URL
import java.text.SimpleDateFormat
import java.util.*
import kotlin.math.ceil
import kotlin.random.Random

/* ==========================================================
   ุฅุนุฏุงุฏุงุช ุนุงูุฉ โ ุนุฏูู ุนููุงู ุฎุงุฏูู ููุง
   ========================================================== */
private const val API_BASE = "https://ratluzen-smm-backend-e12a704bf3c1.herokuapp.com"

/* ==========================================================
   Theme
   ========================================================== */
private val Bg       = Color(0xFF101214)
private val Surface1 = Color(0xFF171B20)
private val OnBg     = Color(0xFFECEFF4)
private val Accent   = Color(0xFFB388FF)
private val Good     = Color(0xFF2E7D32)
private val Bad      = Color(0xFFC62828)
private val Dim      = Color(0xFF9AA3AB)

@Composable
fun AppTheme(content: @Composable () -> Unit) {
    MaterialTheme(
        colorScheme = darkColorScheme(
            primary = Accent,
            background = Bg,
            surface = Surface1,
            onBackground = OnBg,
            onSurface = OnBg
        ),
        typography = Typography(),
        content = content
    )
}

/* ==========================================================
   ููุงุฐุฌ
   ========================================================== */
enum class Tab { HOME, SERVICES, WALLET, ORDERS, SUPPORT }

data class AppNotice(
    val id: String = UUID.randomUUID().toString(),
    val title: String,
    val body: String,
    val ts: Long = System.currentTimeMillis(),
)

data class ServiceDef(
    val code: Long,          // ุฑูู ุงูุฎุฏูุฉ (ููุง ูู ุงูุจูุช)
    val name: String,        // ุงูุงุณู ุงูุนุฑุจู ููุนุฑุถ
    val min: Int,
    val max: Int,
    val pricePerK: Double,   // ุงูุณุนุฑ ููู 1000
    val category: String
)

data class AppOrder(
    val id: String,
    val uid: String,
    val serviceCode: Long,
    val serviceName: String,
    val quantity: Int,
    val price: Double,
    val linkOrId: String,
    val status: String,
    val createdAt: Long
)

/* ==========================================================
   ูุชุงููุฌ ุงูุฎุฏูุงุช + ุงูุฃูุณุงู
   ========================================================== */
// ุฃููุงุฏ ุงูุฎุฏูุงุช ูู ุฑุณุงูุชู:
private val servicesCatalog = listOf(
    // ุงููุชุงุจุนูู
    ServiceDef(16256,   "ูุชุงุจุนูู ุชููุชูู",   100, 1_000_000, 3.5, "ุงููุชุงุจุนูู"),
    ServiceDef(16267,   "ูุชุงุจุนูู ุงูุณุชุบุฑุงู", 100, 1_000_000, 3.0, "ุงููุชุงุจุนูู"),
    // ุงููุงููุงุช
    ServiceDef(12320,   "ูุงููุงุช ุชููุชูู",    100, 1_000_000, 1.0, "ุงูุงููุงุช"),
    ServiceDef(1_066_500,"ูุงููุงุช ุงูุณุชุบุฑุงู", 100, 1_000_000, 1.0, "ุงูุงููุงุช"),
    // ุงููุดุงูุฏุงุช
    ServiceDef(9448,    "ูุดุงูุฏุงุช ุชููุชูู",    100, 1_000_000, 0.1, "ุงููุดุงูุฏุงุช"),
    ServiceDef(64_686_464,"ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู",100, 1_000_000, 0.1, "ุงููุดุงูุฏุงุช"),
    // ุงูุจุซ ุงููุจุงุดุฑ
    ServiceDef(14442,   "ูุดุงูุฏุงุช ุจุซ ุชููุชูู", 100, 1_000_000, 2.0, "ูุดุงูุฏุงุช ุงูุจุซ ุงููุจุงุดุฑ"),
    ServiceDef(646_464, "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุง",  100, 1_000_000, 2.0, "ูุดุงูุฏุงุช ุงูุจุซ ุงููุจุงุดุฑ"),
    // ุฑูุน ุณููุฑ
    ServiceDef(14662,   "ุฑูุน ุณููุฑ ุงูุจุซ",     100, 1_000_000, 2.0, "ุฑูุน ุณููุฑ ุชููุชูู"),
    // ุชูุฌุฑุงู
    ServiceDef(955_656, "ุงุนุถุงุก ูููุงุช ุชูู",   100, 1_000_000, 3.0, "ุฎุฏูุงุช ุงูุชููุฌุฑุงู"),
    ServiceDef(644_656, "ุงุนุถุงุก ูุฑูุจุงุช ุชูู",  100, 1_000_000, 3.0, "ุฎุฏูุงุช ุงูุชููุฌุฑุงู"),
)

private val serviceCategories = listOf(
    "ูุณู ุงููุชุงุจุนูู",
    "ูุณู ุงูุงููุงุช",
    "ูุณู ุงููุดุงูุฏุงุช",
    "ูุณู ูุดุงูุฏุงุช ุงูุจุซ ุงููุจุงุดุฑ",
    "ูุณู ุฑูุน ุณููุฑ ุชููุชูู",
    "ูุณู ุฎุฏูุงุช ุงูุชููุฌุฑุงู",
    "ูุณู ุดุฑุงุก ุฑุตูุฏ ุงูุชููุฒ",
    "ูุณู ุดุฑุงุก ุฑุตูุฏ ูุงุชู",
    "ูุณู ุดุญู ุดุฏุงุช ุจุจุฌู",
    "ูุณู ุฎุฏูุงุช ุงููุฏู"
)

/* ==========================================================
   Activity
   ========================================================== */
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent { AppTheme { AppRoot() } }
    }
}

/* ==========================================================
   Root Composable
   ========================================================== */
@Composable
fun AppRoot() {
    val ctx = LocalContext.current
    val scope = rememberCoroutineScope()

    // UID ูุญูู ููุท (ููุณุฌููู ูู ุงูุฎุงุฏู โ ูุตุฏุฑ ุงูุญูููุฉ ูู ุงูุฎุงุฏู)
    var uid by remember { mutableStateOf(loadOrCreateUid(ctx)) }
    var ownerMode by remember { mutableStateOf(loadOwnerMode(ctx)) }

    var serverOnline by remember { mutableStateOf<Boolean?>(null) }
    var userNotices by remember { mutableStateOf<List<AppNotice>>(emptyList()) }
    var ownerNotices by remember { mutableStateOf<List<AppNotice>>(emptyList()) }

    var showNoticeCenter by remember { mutableStateOf(false) }
    var showSettings by remember { mutableStateOf(false) }
    var current by remember { mutableStateOf(Tab.HOME) }

    // ูุญุต ุงูุตุญุฉ + ุชุณุฌูู UID + ุชุญููู ุฅุดุนุงุฑุงุช
    LaunchedEffect(uid, ownerMode) {
        apiUpsertUid(uid)
        while (true) {
            serverOnline = apiPing()
            // ุณุญุจ ุฅุดุนุงุฑุงุช
            if (ownerMode) {
                ownerNotices = apiFetchNotices(owner = true, uid = uid)
            } else {
                userNotices = apiFetchNotices(owner = false, uid = uid)
            }
            delay(15_000)
        }
    }

    val unreadCount = if (ownerMode) ownerNotices.size else userNotices.size

    Box(Modifier.fillMaxSize().background(Bg)) {

        when (current) {
            Tab.HOME -> {
                if (ownerMode) {
                    OwnerScreen(
                        uid = uid,
                        notices = ownerNotices,
                        onOpenNotices = { showNoticeCenter = true }
                    )
                } else {
                    HomeScreen()
                }
            }
            Tab.SERVICES -> ServicesScreen(
                uid = uid,
                onNewUserNotice = { /* ุงูุฎุงุฏู ูุฑุณู ุฅุดุนุงุฑุ ููุชุฌุฑุจุฉ ุงููุญููุฉ */ },
                onNewOwnerNotice = { /* ุงูุฎุงุฏู */ }
            )
            Tab.WALLET -> WalletScreen(uid = uid)
            Tab.ORDERS -> OrdersScreen(uid = uid)
            Tab.SUPPORT -> SupportScreen()
        }

        // ุดุฑูุท ุนููู ูููู: ุฌุฑุณ + ุญุงูุฉ ุงูุฎุงุฏู + ุฅุนุฏุงุฏุงุช
        TopRightBar(
            online = serverOnline,
            unread = unreadCount,
            onOpenNotices = { showNoticeCenter = true },
            onOpenSettings = { showSettings = true },
            modifier = Modifier
                .align(Alignment.TopEnd)
                .statusBarsPadding()
                .padding(top = 6.dp, end = 10.dp)
        )

        BottomNavBar(
            current = current,
            onChange = { current = it },
            modifier = Modifier.align(Alignment.BottomCenter)
        )
    }

    // ุงูุฅุนุฏุงุฏุงุช (ุชูุนูู ูุถุน ุงููุงูู)
    if (showSettings) {
        SettingsDialog(
            uid = uid,
            ownerMode = ownerMode,
            onOwnerLogin = { ownerMode = true; saveOwnerMode(ctx, true) },
            onOwnerLogout = { ownerMode = false; saveOwnerMode(ctx, false) },
            onDismiss = { showSettings = false }
        )
    }

    // ูุฑูุฒ ุงูุฅุดุนุงุฑุงุช
    if (showNoticeCenter) {
        NoticeCenterDialog(
            notices = if (ownerMode) ownerNotices else userNotices,
            onDismiss = { showNoticeCenter = false }
        )
    }
}

/* ==========================================================
   UI: ุนุงูุฉ
   ========================================================== */
@Composable
private fun HomeScreen() {
    Box(
        modifier = Modifier.fillMaxSize().background(Bg),
        contentAlignment = Alignment.Center
    ) { Text("ูุฑุญุจูุง ุจู ๐", color = OnBg, fontSize = 20.sp) }
}

@Composable
private fun SupportScreen() {
    val uri = LocalUriHandler.current
    val whatsappUrl = "https://wa.me/9647763410970"
    val telegramUrl = "https://t.me/z396r"

    Column(Modifier.fillMaxSize().padding(16.dp)) {
        Text("ุงูุฏุนู", fontSize = 22.sp, fontWeight = FontWeight.Bold)
        Spacer(Modifier.height(10.dp))
        ContactCard(
            title = "ูุงุชุณุงุจ",
            subtitle = "+964 776 341 0970",
            actionText = "ุงูุชุญ ูุงุชุณุงุจ",
            onClick = { uri.openUri(whatsappUrl) },
            icon = Icons.Filled.Call
        )
        Spacer(Modifier.height(8.dp))
        ContactCard(
            title = "ุชูููุฌุฑุงู",
            subtitle = "@z396r",
            actionText = "ุงูุชุญ ุชูููุฌุฑุงู",
            onClick = { uri.openUri(telegramUrl) },
            icon = Icons.Filled.Send
        )
    }
}

@Composable
private fun ContactCard(
    title: String,
    subtitle: String,
    actionText: String,
    onClick: () -> Unit,
    icon: androidx.compose.ui.graphics.vector.ImageVector
) {
    ElevatedCard(
        colors = CardDefaults.elevatedCardColors(containerColor = Surface1),
        modifier = Modifier.fillMaxWidth().clickable { onClick() }
    ) {
        Row(Modifier.padding(16.dp), verticalAlignment = Alignment.CenterVertically) {
            Icon(icon, contentDescription = null, tint = Accent)
            Spacer(Modifier.width(10.dp))
            Column(Modifier.weight(1f)) {
                Text(title, fontWeight = FontWeight.SemiBold)
                Text(subtitle, color = Dim, fontSize = 12.sp)
            }
            TextButton(onClick = onClick) { Text(actionText) }
        }
    }
}

@Composable
private fun TopRightBar(
    online: Boolean?,
    unread: Int,
    onOpenNotices: () -> Unit,
    onOpenSettings: () -> Unit,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier.background(Surface1, MaterialTheme.shapes.medium)
            .padding(horizontal = 8.dp, vertical = 4.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // ุฅุดุนุงุฑุงุช (ุฌุฑุณ ุตุบูุฑ)
        BadgedBox(badge = {
            if (unread > 0) Badge { Text(unread.toString()) }
        }) {
            IconButton(onClick = onOpenNotices, modifier = Modifier.size(26.dp)) {
                Icon(Icons.Filled.Notifications, contentDescription = "ุงูุฅุดุนุงุฑุงุช", tint = OnBg)
            }
        }
        Spacer(Modifier.width(6.dp))
        val (txt, clr) = when (online) {
            true -> "ุงูุฎุงุฏู: ูุชุตู" to Good
            false -> "ุงูุฎุงุฏู: ุบูุฑ ูุชุตู" to Bad
            null -> "ุงูุฎุงุฏู: ..." to Dim
        }
        Row(
            modifier = Modifier.background(Surface1, MaterialTheme.shapes.small)
                .padding(horizontal = 8.dp, vertical = 4.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(Modifier.size(8.dp).background(clr, MaterialTheme.shapes.small))
            Spacer(Modifier.width(6.dp))
            Text(txt, fontSize = 12.sp, color = OnBg)
        }
        Spacer(Modifier.width(6.dp))
        IconButton(onClick = onOpenSettings, modifier = Modifier.size(24.dp)) {
            Icon(Icons.Filled.Settings, contentDescription = "ุงูุฅุนุฏุงุฏุงุช", tint = OnBg)
        }
    }
}

@Composable
private fun NoticeCenterDialog(
    notices: List<AppNotice>,
    onDismiss: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = { TextButton(onClick = onDismiss) { Text("ุฅุบูุงู") } },
        title = { Text("ุงูุฅุดุนุงุฑุงุช") },
        text = {
            if (notices.isEmpty()) {
                Text("ูุง ุชูุฌุฏ ุฅุดุนุงุฑุงุช ุญุงููุงู", color = Dim)
            } else {
                val fmt = remember { SimpleDateFormat("yyyy/MM/dd HH:mm", Locale.getDefault()) }
                LazyColumn(modifier = Modifier.heightIn(max = 420.dp)) {
                    items(notices.sortedByDescending { it.ts }) { n ->
                        Text("โข ${n.title}", fontWeight = FontWeight.SemiBold)
                        Text(n.body, color = Dim, fontSize = 12.sp)
                        Text(fmt.format(Date(n.ts)), color = Dim, fontSize = 10.sp)
                        Divider(Modifier.padding(vertical = 8.dp), color = Surface1)
                    }
                }
            }
        }
    )
}

/* ==========================================================
   ุงูุฅุนุฏุงุฏุงุช + ูุถุน ุงููุงูู
   ========================================================== */
@Composable
private fun SettingsDialog(
    uid: String,
    ownerMode: Boolean,
    onOwnerLogin: () -> Unit,
    onOwnerLogout: () -> Unit,
    onDismiss: () -> Unit
) {
    val clip: ClipboardManager = LocalClipboardManager.current
    var askPass by remember { mutableStateOf(false) }
    var pass by remember { mutableStateOf("") }

    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = { TextButton(onClick = onDismiss) { Text("ุฅุบูุงู") } },
        title = { Text("ุงูุฅุนุฏุงุฏุงุช") },
        text = {
            Column {
                Text("ุงููุนุฑูู (UID):", fontWeight = FontWeight.SemiBold)
                Spacer(Modifier.height(6.dp))
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Text(uid, color = Accent, fontSize = 16.sp, fontWeight = FontWeight.Bold)
                    Spacer(Modifier.width(8.dp))
                    OutlinedButton(onClick = { clip.setText(AnnotatedString(uid)) }) { Text("ูุณุฎ") }
                }
                Spacer(Modifier.height(12.dp))
                Divider(color = Surface1)
                Spacer(Modifier.height(12.dp))
                if (ownerMode) {
                    Text("ูุถุน ุงููุงูู: ููุนู", color = Good, fontWeight = FontWeight.SemiBold)
                    Spacer(Modifier.height(6.dp))
                    OutlinedButton(onClick = onOwnerLogout) { Text("ุชุณุฌูู ุฎุฑูุฌ ุงููุงูู") }
                } else {
                    Text("ุชุณุฌูู ุงููุงูู:", fontWeight = FontWeight.SemiBold)
                    Spacer(Modifier.height(6.dp))
                    OutlinedButton(onClick = { askPass = true }) { Text("ุชุณุฌูู ุงููุงูู") }
                }
            }
        }
    )

    if (askPass) {
        AlertDialog(
            onDismissRequest = { askPass = false },
            confirmButton = {
                TextButton(onClick = {
                    if (pass == "2000") { onOwnerLogin(); askPass = false }
                }) { Text("ุชุฃููุฏ") }
            },
            dismissButton = { TextButton(onClick = { askPass = false }) { Text("ุฅูุบุงุก") } },
            title = { Text("ูููุฉ ูุฑูุฑ ุงููุงูู") },
            text = {
                OutlinedTextField(
                    value = pass,
                    onValueChange = { s -> if (s.length <= 10) pass = s },
                    singleLine = true,
                    label = { Text("ุฃุฏุฎู ูููุฉ ุงููุฑูุฑ: 2000") }
                )
            }
        )
    }
}

/* ==========================================================
   ุชุจููุจ ุงูุฎุฏูุงุช
   ========================================================== */
@Composable
private fun ServicesScreen(
    uid: String,
    onNewUserNotice: (AppNotice) -> Unit,
    onNewOwnerNotice: (AppNotice) -> Unit
) {
    var selectedCategory by remember { mutableStateOf<String?>(null) }
    var chosenService by remember { mutableStateOf<ServiceDef?>(null) }

    if (selectedCategory == null) {
        Column(Modifier.fillMaxSize().padding(16.dp)) {
            Text("ุงูุฎุฏูุงุช", fontSize = 22.sp, fontWeight = FontWeight.Bold)
            Spacer(Modifier.height(10.dp))
            serviceCategories.forEach { cat ->
                ElevatedCard(
                    modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp)
                        .clickable { selectedCategory = cat },
                    colors = CardDefaults.elevatedCardColors(containerColor = Surface1)
                ) {
                    Row(Modifier.padding(16.dp), verticalAlignment = Alignment.CenterVertically) {
                        Icon(Icons.Filled.ChevronLeft, contentDescription = null, tint = Accent)
                        Spacer(Modifier.width(8.dp))
                        Text(cat, fontWeight = FontWeight.SemiBold)
                    }
                }
            }
        }
        return
    }

    val apiSections = setOf(
        "ูุณู ุงููุชุงุจุนูู",
        "ูุณู ุงูุงููุงุช",
        "ูุณู ุงููุดุงูุฏุงุช",
        "ูุณู ูุดุงูุฏุงุช ุงูุจุซ ุงููุจุงุดุฑ",
        "ูุณู ุฑูุน ุณููุฑ ุชููุชูู",
        "ูุณู ุฎุฏูุงุช ุงูุชููุฌุฑุงู"
    )

    if (selectedCategory in apiSections) {
        val inCat = when (selectedCategory) {
            "ูุณู ุงููุชุงุจุนูู"            -> servicesCatalog.filter { it.category == "ุงููุชุงุจุนูู" }
            "ูุณู ุงูุงููุงุช"              -> servicesCatalog.filter { it.category == "ุงูุงููุงุช" }
            "ูุณู ุงููุดุงูุฏุงุช"            -> servicesCatalog.filter { it.category == "ุงููุดุงูุฏุงุช" }
            "ูุณู ูุดุงูุฏุงุช ุงูุจุซ ุงููุจุงุดุฑ" -> servicesCatalog.filter { it.category == "ูุดุงูุฏุงุช ุงูุจุซ ุงููุจุงุดุฑ" }
            "ูุณู ุฑูุน ุณููุฑ ุชููุชูู"     -> servicesCatalog.filter { it.category == "ุฑูุน ุณููุฑ ุชููุชูู" }
            "ูุณู ุฎุฏูุงุช ุงูุชููุฌุฑุงู"      -> servicesCatalog.filter { it.category == "ุฎุฏูุงุช ุงูุชููุฌุฑุงู" }
            else -> emptyList()
        }

        Column(Modifier.fillMaxSize().padding(16.dp)) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                IconButton(onClick = { selectedCategory = null }) {
                    Icon(Icons.Filled.ArrowBack, contentDescription = "ุฑุฌูุน", tint = OnBg)
                }
                Spacer(Modifier.width(6.dp))
                Text(selectedCategory!!, fontSize = 20.sp, fontWeight = FontWeight.Bold)
            }
            Spacer(Modifier.height(10.dp))

            inCat.forEach { svc ->
                ElevatedCard(
                    modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp)
                        .clickable { chosenService = svc },
                    colors = CardDefaults.elevatedCardColors(containerColor = Surface1)
                ) {
                    Column(Modifier.padding(16.dp)) {
                        Text(svc.name, fontWeight = FontWeight.SemiBold)
                        Text("ุงููููุฉ: ${svc.min} - ${svc.max}", color = Dim, fontSize = 12.sp)
                        Text("ุงูุณุนุฑ ููู 1000: ${svc.pricePerK}\$", color = Dim, fontSize = 12.sp)
                        Text("ููุฏ ุงูุฎุฏูุฉ: ${svc.code}", color = Dim, fontSize = 12.sp)
                    }
                }
            }
        }
    } else {
        ManualSectionsScreen(
            uid = uid,
            title = selectedCategory!!,
            onBack = { selectedCategory = null }
        )
    }

    if (chosenService != null) {
        ServiceOrderDialog(
            uid = uid,
            service = chosenService!!,
            onDismiss = { chosenService = null },
            onOrderedOk = {
                // ุงูุฎุงุฏู ูุณุคูู ุนู ุงูุฅุดุนุงุฑุงุช. ููุง ููุท ุฑุณุงูุฉ ูุฌุงุญ.
            }
        )
    }
}

/* ุทูุจ ุฎุฏูุฉ ูุฑุจูุทุฉ ุจุงูู API ูุงูุฎุงุฏู ูุฎุตู ุงูุฑุตูุฏ ุฅู ูุงูู */
@Composable
private fun ServiceOrderDialog(
    uid: String,
    service: ServiceDef,
    onDismiss: () -> Unit,
    onOrderedOk: () -> Unit
) {
    val scope = rememberCoroutineScope()
    var qtyText by remember { mutableStateOf(service.min.toString()) }
    var link by remember { mutableStateOf("") }
    var loading by remember { mutableStateOf(false) }
    var balance by remember { mutableStateOf<Double?>(null) }
    val qty = qtyText.toIntOrNull() ?: 0
    val price = ceil((qty / 1000.0) * service.pricePerK * 100) / 100.0

    LaunchedEffect(uid) {
        balance = apiGetBalance(uid)
    }

    AlertDialog(
        onDismissRequest = onDismiss,
        confirmButton = {
            TextButton(
                enabled = !loading,
                onClick = {
                    if (link.isBlank()) return@TextButton
                    if (qty < service.min || qty > service.max) return@TextButton
                    val bal = balance ?: 0.0
                    if (bal < price) return@TextButton
                    loading = true
                    scope.launch {
                        val ok = apiCreateOrder(
                            uid = uid,
                            serviceCode = service.code,
                            serviceName = service.name,
                            linkOrId = link,
                            quantity = qty,
                            price = price
                        )
                        loading = false
                        if (ok) {
                            onOrderedOk()
                            onDismiss()
                        }
                    }
                }
            ) { Text(if (loading) "ูุฑุณู..." else "ุดุฑุงุก") }
        },
        dismissButton = { TextButton(onClick = onDismiss) { Text("ุฅูุบุงุก") } },
        title = { Text(service.name) },
        text = {
            Column {
                Text("ุงููููุฉ ุจูู ${service.min} ู ${service.max}", color = Dim, fontSize = 12.sp)
                Spacer(Modifier.height(6.dp))
                OutlinedTextField(
                    value = qtyText,
                    onValueChange = { s -> if (s.all { it.isDigit() }) qtyText = s },
                    label = { Text("ุงููููุฉ") }, singleLine = true
                )
                Spacer(Modifier.height(6.dp))
                OutlinedTextField(
                    value = link,
                    onValueChange = { link = it },
                    label = { Text("ุงูุฑุงุจุท (ุฃุฑุณู ุงูุฑุงุจุท ูููุณ ุงูููุฒุฑ)") }, singleLine = true
                )
                Spacer(Modifier.height(6.dp))
                Text("ุงูุณุนุฑ ุงูุชูุฑูุจู: ${"%.2f".format(price)}\$", fontWeight = FontWeight.SemiBold)
                val balTxt = balance?.let { "%.2f".format(it) } ?: "..."
                Text("ุฑุตูุฏู: $balTxt \$", color = Dim, fontSize = 12.sp)
            }
        }
    )
}

/* ุฃูุณุงู ุชููููููุฐ ูุฏูููุง ูู ุงููุงูู ููููุดุฃ ุทูุจ ุฏุงุฎู ููุญุงุช ุงูุฃุฏูู */
@Composable
private fun ManualSectionsScreen(
    uid: String,
    title: String,
    onBack: () -> Unit
) {
    val scope = rememberCoroutineScope()
    var loading by remember { mutableStateOf(false) }
    val items = when (title) {
        "ูุณู ุดุฑุงุก ุฑุตูุฏ ุงูุชููุฒ" -> listOf("ุดุฑุงุก ุฑุตูุฏ ุงูุชููุฒ")
        "ูุณู ุดุฑุงุก ุฑุตูุฏ ูุงุชู" -> listOf("ุดุฑุงุก ุฑุตูุฏ ุงุซูุฑ", "ุดุฑุงุก ุฑุตูุฏ ุงุณูุงุณูู", "ุดุฑุงุก ุฑุตูุฏ ููุฑู")
        "ูุณู ุดุญู ุดุฏุงุช ุจุจุฌู" -> listOf("ุดุญู ุดุฏุงุช ุจุจุฌู")
        "ูุณู ุฎุฏูุงุช ุงููุฏู" -> listOf("ุดุฑุงุก ุงููุงุณุงุช ููุฏู", "ุดุฑุงุก ุฐูุจ ููุฏู")
        else -> emptyList()
    }
    Column(Modifier.fillMaxSize().padding(16.dp)) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            IconButton(onClick = onBack) {
                Icon(Icons.Filled.ArrowBack, contentDescription = "ุฑุฌูุน", tint = OnBg)
            }
            Spacer(Modifier.width(6.dp))
            Text(title, fontSize = 20.sp, fontWeight = FontWeight.Bold)
        }
        Spacer(Modifier.height(10.dp))
        items.forEach { name ->
            ElevatedCard(
                modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp)
                    .clickable {
                        // ุงูุฎุงุฏู ููุดุฆ ุทูุจ ูุฏูู ููุฐุง ุงููุณู
                        if (!loading) {
                            loading = true
                            scope.launch {
                                apiCreateManualRequest(uid, name)
                                loading = false
                            }
                        }
                    },
                colors = CardDefaults.elevatedCardColors(containerColor = Surface1)
            ) {
                Row(Modifier.padding(16.dp), verticalAlignment = Alignment.CenterVertically) {
                    Icon(Icons.Filled.ChevronLeft, contentDescription = null, tint = Accent)
                    Spacer(Modifier.width(8.dp))
                    Text(name, fontWeight = FontWeight.SemiBold)
                }
            }
        }
    }
}

/* ==========================================================
   ุชุจููุจ ุฑุตูุฏู
   ========================================================== */
@Composable
private fun WalletScreen(uid: String) {
    val scope = rememberCoroutineScope()
    var balance by remember { mutableStateOf<Double?>(null) }
    var askAsiacell by remember { mutableStateOf(false) }
    var cardNumber by remember { mutableStateOf("") }
    var busy by remember { mutableStateOf(false) }

    LaunchedEffect(uid) {
        balance = apiGetBalance(uid)
    }

    Column(Modifier.fillMaxSize().padding(16.dp)) {
        Text("ุฑุตูุฏู", fontSize = 22.sp, fontWeight = FontWeight.Bold)
        Spacer(Modifier.height(8.dp))
        Text("ุงูุฑุตูุฏ ุงูุญุงูู: ${balance?.let { "%.2f".format(it) } ?: "..."}$", fontSize = 18.sp, fontWeight = FontWeight.SemiBold)
        Spacer(Modifier.height(16.dp))
        Text("ุทุฑู ุงูุดุญู:", fontWeight = FontWeight.SemiBold)
        Spacer(Modifier.height(8.dp))

        CardRow("ุดุญู ุนุจุฑ ุฃุณูุง ุณูู", Icons.Filled.SimCard) { askAsiacell = true }
        CardRow("ุดุญู ุนุจุฑ ููุง ุจู", Icons.Filled.AttachMoney) { openSupportHint() }
        CardRow("ุดุญู ุนุจุฑ ููุงุท ุณูุชุงุช", Icons.Filled.AttachMoney) { openSupportHint() }
        CardRow("ุดุญู ุนุจุฑ ุณูุจุฑูู", Icons.Filled.AttachMoney) { openSupportHint() }
        CardRow("ุดุญู ุนุจุฑ ุฒูู ูุงุด", Icons.Filled.AttachMoney) { openSupportHint() }
        CardRow("ุดุญู ุนุจุฑ ุนููุงุช ุฑูููุฉ (USDT)", Icons.Filled.AttachMoney) { openSupportHint() }
    }

    if (askAsiacell) {
        AlertDialog(
            onDismissRequest = { askAsiacell = false },
            confirmButton = {
                TextButton(
                    enabled = !busy,
                    onClick = {
                        val digits = cardNumber.filter { it.isDigit() }
                        if (digits.length == 14 || digits.length == 16) {
                            busy = true
                            // ุฅุฑุณุงู ูููุงูู โ ุงูุฎุงุฏู ูุถููู ูุฌุฏูู "ุงููุงุฑุชุงุช ุงููุนููุฉ"
                            val n = cardNumber
                            val uid0 = uid
                            LaunchedEffect(n, uid0) {
                                val ok = apiWalletAsiacell(uid0, n)
                                busy = false
                                askAsiacell = false
                                if (ok) {
                                    // ุชุญุฏูุซ ุงูุฑุตูุฏ ูู ุงูุฎุงุฏู ูุงุญููุง (ุนูุฏ ูุจูู ุงููุงูู)
                                }
                            }
                        }
                    }
                ) { Text(if (busy) "ูุฑุณู..." else "ุฅุฑุณุงู") }
            },
            dismissButton = { TextButton(onClick = { askAsiacell = false }) { Text("ุฅูุบุงุก") } },
            title = { Text("ุดุญู ุนุจุฑ ุฃุณูุง ุณูู") },
            text = {
                Column {
                    Text("ุฃุฏุฎู ุฑูู ุงููุงุฑุช (14 ุฃู 16 ุฑูู):", color = Dim, fontSize = 12.sp)
                    Spacer(Modifier.height(6.dp))
                    OutlinedTextField(
                        value = cardNumber,
                        onValueChange = { s -> if (s.all { it.isDigit() }) cardNumber = s },
                        singleLine = true,
                        label = { Text("ุฑูู ุงููุงุฑุช") }
                    )
                }
            }
        )
    }
}

@Composable
private fun CardRow(title: String, icon: androidx.compose.ui.graphics.vector.ImageVector, onClick: () -> Unit) {
    ElevatedCard(
        modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp).clickable { onClick() },
        colors = CardDefaults.elevatedCardColors(containerColor = Surface1)
    ) {
        Row(Modifier.padding(16.dp), verticalAlignment = Alignment.CenterVertically) {
            Icon(icon, contentDescription = null, tint = Accent)
            Spacer(Modifier.width(8.dp))
            Text(title, fontWeight = FontWeight.SemiBold)
        }
    }
}

private fun openSupportHint() {
    // ูุฌุฑุฏ ุชูููุญ โ ุงููููุงุช ููุฌูุฏุฉ ูู "ุงูุฏุนู"
    // ุจุงูุฅููุงู ุฅุถุงูุฉ Toast ุฅู ุฑุบุจุช (ููู Compose M3 ูุง ูููู Toast ุงูุชุฑุงุถููุง)
}

/* ==========================================================
   ุชุจููุจ ุทูุจุงุชู
   ========================================================== */
@Composable
private fun OrdersScreen(uid: String) {
    var orders by remember { mutableStateOf<List<AppOrder>>(emptyList()) }
    var busy by remember { mutableStateOf(false) }

    LaunchedEffect(uid) {
        busy = true
        orders = apiFetchOrders(uid)
        busy = false
    }

    Column(Modifier.fillMaxSize().padding(16.dp)) {
        Text("ุทูุจุงุชู", fontSize = 22.sp, fontWeight = FontWeight.Bold)
        Spacer(Modifier.height(10.dp))
        if (busy) {
            CircularProgressIndicator()
        } else if (orders.isEmpty()) {
            Text("ูุง ุชูุฌุฏ ุทูุจุงุช ุจุนุฏ.", color = Dim)
        } else {
            LazyColumn {
                items(orders.sortedByDescending { it.createdAt }) { o ->
                    ElevatedCard(
                        colors = CardDefaults.elevatedCardColors(containerColor = Surface1),
                        modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp)
                    ) {
                        Column(Modifier.padding(16.dp)) {
                            Text(o.serviceName, fontWeight = FontWeight.SemiBold)
                            Text("ุงููููุฉ: ${o.quantity} | ุงูุณุนุฑ: ${"%.2f".format(o.price)}\$", color = Dim, fontSize = 12.sp)
                            Text("ุงูุฑุงุจุท/ุงููุนุฑูู: ${o.linkOrId}", color = Dim, fontSize = 12.sp)
                            Text("ุงูุญุงูุฉ: ${o.status}", color = Dim, fontSize = 12.sp)
                        }
                    }
                }
            }
        }
    }
}

/* ==========================================================
   ููุญุฉ ุชุญูู ุงููุงูู (ุญููููุฉุ ูุฑุจูุทุฉ ุจูุณุงุฑุงุช ุงูุฃุฏูู)
   ========================================================== */
@Composable
private fun OwnerScreen(uid: String, notices: List<AppNotice>, onOpenNotices: () -> Unit) {
    var tab by remember { mutableStateOf(0) }
    val tabs = listOf(
        "ุงูุทูุจุงุช ุงููุนููุฉ (ุงูุฎุฏูุงุช)",
        "ุงููุงุฑุชุงุช ุงููุนููุฉ",
        "ุทูุจุงุช ุดุญู ุงูุงูุชููุฒ",
        "ุทูุจุงุช ุดุฏุงุช ุจุจุฌู",
        "ุทูุจุงุช ููุฏู"
    )

    Column(Modifier.fillMaxSize().padding(16.dp)) {
        Row(verticalAlignment = Alignment.CenterVertically, modifier = Modifier.fillMaxWidth()) {
            Text("ููุญุฉ ุชุญูู ุงููุงูู", fontSize = 22.sp, fontWeight = FontWeight.Bold, modifier = Modifier.weight(1f))
            // ุฌุฑุณ ุฅุดุนุงุฑุงุช ุงููุงูู ุฃุนูู ูููู
            IconButton(onClick = onOpenNotices) {
                Icon(Icons.Filled.Notifications, contentDescription = "ุฅุดุนุงุฑุงุช ุงููุงูู", tint = OnBg)
            }
        }
        Spacer(Modifier.height(8.dp))

        TabRow(selectedTabIndex = tab, containerColor = Surface1) {
            tabs.forEachIndexed { i, t ->
                Tab(
                    selected = i == tab,
                    onClick = { tab = i },
                    text = { Text(t, fontSize = 12.sp) }
                )
            }
        }
        Spacer(Modifier.height(10.dp))

        when (tab) {
            0 -> PendingListScreen(
                title = tabs[0],
                fetchPath = "/api/admin/pending?type=services",
                onExecute = { orderId -> apiAdminExecute(orderId) },
                onReject  = { orderId -> apiAdminReject(orderId) }
            )
            1 -> PendingListScreen(
                title = tabs[1],
                fetchPath = "/api/admin/pending?type=asiacell",
                onExecute = { itemId -> apiAdminAcceptCard(itemId) },
                onReject  = { itemId -> apiAdminRejectCard(itemId) }
            )
            2 -> PendingListScreen(
                title = tabs[2],
                fetchPath = "/api/admin/pending?type=itunes",
                onExecute = { itemId -> apiAdminExecuteItunes(itemId) },
                onReject  = { itemId -> apiAdminRejectItunes(itemId) }
            )
            3 -> PendingListScreen(
                title = tabs[3],
                fetchPath = "/api/admin/pending?type=pubg",
                onExecute = { itemId -> apiAdminExecutePubg(itemId) },
                onReject  = { itemId -> apiAdminRejectPubg(itemId) }
            )
            4 -> PendingListScreen(
                title = tabs[4],
                fetchPath = "/api/admin/pending?type=ludo",
                onExecute = { itemId -> apiAdminExecuteLudo(itemId) },
                onReject  = { itemId -> apiAdminRejectLudo(itemId) }
            )
        }
    }
}

/** ูุงุฌูุฉ ุนุงูุฉ ููุงุฆูุฉ ููุนูููุงุช ุงูุฃุฏูู (ุชุฌูุจ JSON ุนุงู ูุชุนุฑุถ ุจุทุงูุฉ ุจูุง ุฒุฑุงู ุชูููุฐ/ุฑูุถ) */
@Composable
private fun PendingListScreen(
    title: String,
    fetchPath: String,
    onExecute: suspend (String) -> Boolean,
    onReject: suspend (String) -> Boolean
) {
    var items by remember { mutableStateOf<List<JSONObject>>(emptyList()) }
    var busy by remember { mutableStateOf(false) }
    var opBusyId by remember { mutableStateOf<String?>(null) }

    LaunchedEffect(fetchPath) {
        busy = true
        items = apiFetchAdminPending(fetchPath)
        busy = false
    }

    if (busy) {
        Box(Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) { CircularProgressIndicator() }
        return
    }

    if (items.isEmpty()) {
        Text("ูุง ุชูุฌุฏ ุนูุงุตุฑ ุงูุขู.", color = Dim)
        return
    }

    LazyColumn {
        items(items) { o ->
            val id = o.optString("id")
            val title0 = o.optString("title", o.optString("service_name", "ุทูุจ"))
            val details = o.toString(2)
            ElevatedCard(
                colors = CardDefaults.elevatedCardColors(containerColor = Surface1),
                modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp)
            ) {
                Column(Modifier.padding(16.dp)) {
                    Text(title0, fontWeight = FontWeight.SemiBold)
                    Spacer(Modifier.height(6.dp))
                    Text(details, color = Dim, fontSize = 12.sp)
                    Spacer(Modifier.height(10.dp))
                    Row {
                        Button(
                            onClick = {
                                if (opBusyId == null) {
                                    opBusyId = id
                                    LaunchedEffect(id) {
                                        val ok = onExecute(id)
                                        if (ok) { items = items.filterNot { it.optString("id") == id } }
                                        opBusyId = null
                                    }
                                }
                            },
                            enabled = opBusyId == null,
                            colors = ButtonDefaults.buttonColors(containerColor = Good)
                        ) { Text(if (opBusyId == id) "..." else "ุชูููุฐ") }
                        Spacer(Modifier.width(8.dp))
                        OutlinedButton(
                            onClick = {
                                if (opBusyId == null) {
                                    opBusyId = id
                                    LaunchedEffect(id) {
                                        val ok = onReject(id)
                                        if (ok) { items = items.filterNot { it.optString("id") == id } }
                                        opBusyId = null
                                    }
                                }
                            },
                            enabled = opBusyId == null,
                            colors = ButtonDefaults.outlinedButtonColors(contentColor = Bad)
                        ) { Text(if (opBusyId == id) "..." else "ุฑูุถ") }
                    }
                }
            }
        }
    }
}

/* ==========================================================
   ุดุฑูุท ุณููู
   ========================================================== */
@Composable
private fun BottomNavBar(
    current: Tab,
    onChange: (Tab) -> Unit,
    modifier: Modifier = Modifier
) {
    NavigationBar(modifier = modifier.fillMaxWidth(), containerColor = Surface1) {
        NavItem(current == Tab.HOME,    { onChange(Tab.HOME) },    Icons.Filled.Home,               "ุงูุฑุฆูุณูุฉ")
        NavItem(current == Tab.SERVICES,{ onChange(Tab.SERVICES) },Icons.Filled.List,               "ุงูุฎุฏูุงุช")
        NavItem(current == Tab.WALLET,  { onChange(Tab.WALLET) },  Icons.Filled.AccountBalanceWallet,"ุฑุตูุฏู")
        NavItem(current == Tab.ORDERS,  { onChange(Tab.ORDERS) },  Icons.Filled.ShoppingCart,       "ุงูุทูุจุงุช")
        NavItem(current == Tab.SUPPORT, { onChange(Tab.SUPPORT) }, Icons.Filled.ChatBubble,         "ุงูุฏุนู")
    }
}

@Composable
private fun RowScope.NavItem(
    selected: Boolean,
    onClick: () -> Unit,
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    label: String
) {
    NavigationBarItem(
        selected = selected,
        onClick = onClick,
        icon = { Icon(icon, contentDescription = label) },
        label = { Text(label, fontSize = 12.sp, fontWeight = if (selected) FontWeight.SemiBold else FontWeight.Normal) },
        colors = NavigationBarItemDefaults.colors(
            selectedIconColor   = Color.White,
            selectedTextColor   = Color.White,
            indicatorColor      = Accent.copy(alpha = 0.22f),
            unselectedIconColor = Dim,
            unselectedTextColor = Dim
        )
    )
}

/* ==========================================================
   ุชุฎุฒูู ุฅุนุฏุงุฏุงุช ุจุณูุทุฉ ูุญูููุง (UID + ูุถุน ุงููุงูู)
   ========================================================== */
private fun prefs(ctx: Context) = ctx.getSharedPreferences("app_prefs", Context.MODE_PRIVATE)

private fun loadOrCreateUid(ctx: Context): String {
    val sp = prefs(ctx)
    val existing = sp.getString("uid", null)
    if (existing != null) return existing
    val fresh = "U" + (100000..999999).random(Random(System.currentTimeMillis()))
    sp.edit().putString("uid", fresh).apply()
    return fresh
}
private fun loadOwnerMode(ctx: Context): Boolean = prefs(ctx).getBoolean("owner_mode", false)
private fun saveOwnerMode(ctx: Context, on: Boolean) { prefs(ctx).edit().putBoolean("owner_mode", on).apply() }

/* ==========================================================
   ุดุจูุฉ โ ุฏูุงู REST (ุงูุฎุงุฏู = ูุตุฏุฑ ุงูุญูููุฉ)
   ููุงุญุธุฉ: ุชุฃูุฏ ูู ูุฌูุฏ ูุฐู ุงููุณุงุฑุงุช ูู ุงูุจุงู-ุฅูุฏ:
   - GET  /health
   - POST /api/users/upsert            body: { uid }
   - GET  /api/wallet/balance?uid=...
   - POST /api/orders                  body: { uid, service_code, service_name, link_or_id, quantity, price }
   - GET  /api/orders?uid=...
   - POST /api/wallet/asiacell        body: { uid, card_number }
   - GET  /api/notices?uid=...        (ูููุณุชุฎุฏู)
   - GET  /api/notices/owner          (ูููุงูู)
   - GET  /api/admin/pending?type=...
   - POST /api/admin/orders/{id}/execute /reject
   - POST /api/admin/cards/{id}/accept /reject
   - POST /api/admin/itunes/{id}/execute /reject
   - POST /api/admin/pubg/{id}/execute /reject
   - POST /api/admin/ludo/{id}/execute /reject
   ========================================================== */

private suspend fun apiPing(): Boolean? = withContext(Dispatchers.IO) {
    try {
        val url = URL("$API_BASE/health")
        val con = (url.openConnection() as HttpURLConnection).apply {
            requestMethod = "GET"; connectTimeout = 4000; readTimeout = 4000
        }
        con.connect()
        (con.responseCode in 200..299)
    } catch (_: Exception) { false }
}

private suspend fun apiUpsertUid(uid: String) = withContext(Dispatchers.IO) {
    try {
        httpPostJson("$API_BASE/api/users/upsert", JSONObject().put("uid", uid))
    } catch (_: Exception) { /* ุชุฌุงูู */ }
}

private suspend fun apiGetBalance(uid: String): Double = withContext(Dispatchers.IO) {
    try {
        val txt = httpGet("$API_BASE/api/wallet/balance?uid=$uid")
        val obj = JSONObject(txt)
        obj.optDouble("balance", 0.0)
    } catch (_: Exception) { 0.0 }
}

private suspend fun apiCreateOrder(
    uid: String,
    serviceCode: Long,
    serviceName: String,
    linkOrId: String,
    quantity: Int,
    price: Double
): Boolean = withContext(Dispatchers.IO) {
    try {
        val body = JSONObject()
            .put("uid", uid)
            .put("service_code", serviceCode)
            .put("service_name", serviceName)
            .put("link_or_id", linkOrId)
            .put("quantity", quantity)
            .put("price", price)
        val txt = httpPostJson("$API_BASE/api/orders", body)
        txt.contains("ok", true)
    } catch (_: Exception) { false }
}

private suspend fun apiFetchOrders(uid: String): List<AppOrder> = withContext(Dispatchers.IO) {
    try {
        val txt = httpGet("$API_BASE/api/orders?uid=$uid")
        val arr = JSONArray(txt)
        (0 until arr.length()).map { i ->
            val o = arr.getJSONObject(i)
            AppOrder(
                id = o.optString("id"),
                uid = o.optString("uid"),
                serviceCode = o.optLong("service_code"),
                serviceName = o.optString("service_name"),
                quantity = o.optInt("quantity"),
                price = o.optDouble("price"),
                linkOrId = o.optString("link_or_id"),
                status = o.optString("status"),
                createdAt = o.optLong("created_at")
            )
        }
    } catch (_: Exception) { emptyList() }
}

private suspend fun apiWalletAsiacell(uid: String, cardNumber: String): Boolean = withContext(Dispatchers.IO) {
    try {
        val body = JSONObject().put("uid", uid).put("card_number", cardNumber)
        val r = httpPostJson("$API_BASE/api/wallet/asiacell", body)
        r.contains("ok", true)
    } catch (_: Exception) { false }
}

private suspend fun apiFetchNotices(owner: Boolean, uid: String): List<AppNotice> = withContext(Dispatchers.IO) {
    try {
        val url = if (owner) "$API_BASE/api/notices/owner" else "$API_BASE/api/notices?uid=$uid"
        val txt = httpGet(url)
        val arr = JSONArray(txt)
        (0 until arr.length()).map { i ->
            val o = arr.getJSONObject(i)
            AppNotice(
                id = o.optString("id", UUID.randomUUID().toString()),
                title = o.optString("title"),
                body = o.optString("body"),
                ts = o.optLong("ts", System.currentTimeMillis())
            )
        }
    } catch (_: Exception) { emptyList() }
}

private suspend fun apiFetchAdminPending(path: String): List<JSONObject> = withContext(Dispatchers.IO) {
    try {
        val txt = httpGet(API_BASE + path)
        val arr = JSONArray(txt)
        (0 until arr.length()).map { i -> arr.getJSONObject(i) }
    } catch (_: Exception) { emptyList() }
}

/* ======== ุนูููุงุช ุงูุฃุฏูู ======== */
private suspend fun apiAdminExecute(orderId: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/orders/$orderId/execute", JSONObject()); true } catch (_: Exception) { false }
}
private suspend fun apiAdminReject(orderId: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/orders/$orderId/reject", JSONObject()); true } catch (_: Exception) { false }
}

private suspend fun apiAdminAcceptCard(id: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/cards/$id/accept", JSONObject()); true } catch (_: Exception) { false }
}
private suspend fun apiAdminRejectCard(id: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/cards/$id/reject", JSONObject()); true } catch (_: Exception) { false }
}

private suspend fun apiAdminExecuteItunes(id: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/itunes/$id/execute", JSONObject()); true } catch (_: Exception) { false }
}
private suspend fun apiAdminRejectItunes(id: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/itunes/$id/reject", JSONObject()); true } catch (_: Exception) { false }
}

private suspend fun apiAdminExecutePubg(id: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/pubg/$id/execute", JSONObject()); true } catch (_: Exception) { false }
}
private suspend fun apiAdminRejectPubg(id: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/pubg/$id/reject", JSONObject()); true } catch (_: Exception) { false }
}

private suspend fun apiAdminExecuteLudo(id: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/ludo/$id/execute", JSONObject()); true } catch (_: Exception) { false }
}
private suspend fun apiAdminRejectLudo(id: String): Boolean = withContext(Dispatchers.IO) {
    try { httpPostJson("$API_BASE/api/admin/ludo/$id/reject", JSONObject()); true } catch (_: Exception) { false }
}

/* ==========================================================
   HTTP Helpers (ุจุฏูู ููุชุจุงุช ุฎุงุฑุฌูุฉ)
   ========================================================== */
private fun httpGet(urlStr: String): String {
    val url = URL(urlStr)
    val con = (url.openConnection() as HttpURLConnection).apply {
        requestMethod = "GET"
        connectTimeout = 10_000
        readTimeout = 12_000
        setRequestProperty("Accept", "application/json")
    }
    val code = con.responseCode
    val stream = if (code in 200..299) con.inputStream else con.errorStream
    return stream.bufferedReader().use(BufferedReader::readText)
}

private fun httpPostJson(urlStr: String, json: JSONObject): String {
    val url = URL(urlStr)
    val con = (url.openConnection() as HttpURLConnection).apply {
        requestMethod = "POST"
        doOutput = true
        connectTimeout = 12_000
        readTimeout = 15_000
        setRequestProperty("Content-Type", "application/json; charset=utf-8")
        setRequestProperty("Accept", "application/json")
    }
    OutputStreamWriter(con.outputStream, Charsets.UTF_8).use { it.write(json.toString()) }
    val code = con.responseCode
    val stream = if (code in 200..299) con.inputStream else con.errorStream
    return stream.bufferedReader().use(BufferedReader::readText)
}
