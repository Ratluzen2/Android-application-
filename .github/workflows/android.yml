name: Android Single APK

on:
  push:
    branches: ["main"]        # يبني عند أي دفع على main
  workflow_dispatch:          # وتشغيل يدوي

env:
  PROJECT_DIR: .

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        # مهم: لجلب كل التاغات

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept licenses & install build tools
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Create google-services.json from secret
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          if [ -n "$GOOGLE_SERVICES_JSON" ]; then
            mkdir -p "${{ env.PROJECT_DIR }}/app"
            printf '%s' "$GOOGLE_SERVICES_JSON" > "${{ env.PROJECT_DIR }}/app/google-services.json"
            echo "google-services.json created"
          else
            echo "GOOGLE_SERVICES_JSON is empty (skipping)"
          fi

      - name: Compute VERSION_* from latest tag
        run: |
          # اجلب آخر تاغ منشور في المستودع (مثل v1749). إن لم يوجد، استخدم عدّاد التشغيل.
          LATEST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || true)"
          if [ -n "$LATEST_TAG" ]; then
            VC="$(echo "$LATEST_TAG" | tr -cd '0-9')"
            echo "VERSION_NAME=$LATEST_TAG" >> $GITHUB_ENV
            echo "VERSION_CODE=${VC:-1}" >> $GITHUB_ENV
            echo "Using latest tag: $LATEST_TAG -> VC=$VC"
          else
            echo "VERSION_NAME=main-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
            echo "VERSION_CODE=$((100000 + GITHUB_RUN_NUMBER))" >> $GITHUB_ENV
            echo "No tags found; fallback VC=$VERSION_CODE"
          fi

      - name: Build (assembleRelease)
        working-directory: ${{ env.PROJECT_DIR }}
        run: gradle clean :app:assembleRelease -PversionName="$VERSION_NAME"

      - name: Prepare keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | tr -d '\r' | base64 -d > keystore.jks
          ls -lh keystore.jks

      - name: Align & Sign (single final APK)
        env:
          KS_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KS_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_PASS: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -e
          RELEASE_DIR="${{ env.PROJECT_DIR }}/app/build/outputs/apk/release"
          UNSIGNED_APK=$(ls "$RELEASE_DIR"/*-unsigned.apk | head -n 1)

          BT=$(ls -d $ANDROID_HOME/build-tools/* | sort -V | tail -n1)
          echo "Using build-tools at: $BT"

          "$BT/zipalign" -f 4 "$UNSIGNED_APK" "$RELEASE_DIR/app-release-aligned.apk"
          "$BT/apksigner" sign --ks keystore.jks --ks-key-alias "$KS_ALIAS"             --ks-pass pass:"$KS_PASS" --key-pass pass:"$KEY_PASS"             --out "$RELEASE_DIR/app-release.apk" "$RELEASE_DIR/app-release-aligned.apk"
          "$BT/apksigner" verify -v "$RELEASE_DIR/app-release.apk"
          ls -lh "$RELEASE_DIR"/app-release*.apk

      - name: Upload artifact (APK only; no Releases upload)
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: ${{ env.PROJECT_DIR }}/app/build/outputs/apk/release/app-release.apk
